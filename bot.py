from itertools import count

from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, CallbackQueryHandler, CommandHandler, ContextTypes

from credentials import ChatGPT_TOKEN,TELEBOT_TOKEN
from gpt import ChatGptService
from util import load_message, load_prompt, send_text_buttons, send_text, \
    send_image, show_main_menu, Dialog, default_callback_handler


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'main'
    text = load_message('main')
    await send_image(update, context, 'main')
    await send_text(update, context, text)
    await show_main_menu(update, context, {
        'start': '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é',
        'random': '–£–∑–Ω–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç üß†',
        'gpt': '–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å —á–∞—Ç—É GPT ü§ñ',
        'talk': '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é üë§',
        'quiz': '–ü–æ—É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –∫–≤–∏–∑–µ ‚ùì',
        'recommend': '–ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–ª—è —Ñ–∏–ª—å–º–∞ –∏–ª–∏ –∫–Ω–∏–≥–∏'
        # –î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –≤ –º–µ–Ω—é –º–æ–∂–Ω–æ —Ç–∞–∫:
        # 'command': 'button text'

    })

async def gpt(update: Update, context: ContextTypes.DEFAULT_TYPE):
    dialog.mode = 'gpt'
    promt = load_prompt('gpt')
    message = load_message('gpt')
    chat_gpt.set_prompt(promt)
    await send_image(update, context, 'gpt')
    await send_text(update, context, message)

count = 0
async def gpt_dialog(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global count
    text = update.message.text
    message = await  send_text(update, context, "–î—É–º–∞—é, —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å")
    answer =  await chat_gpt.add_message(text)
    if answer == '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!':
        count +=1
        answer == (answer,'- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤',count) #–ü–æ—á–µ–º—É-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞–¥–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ö–æ—Ç—è —Å—á–µ—Ç—á–∏–∫ –æ—Ç—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç
        await message.edit_text(answer)
        await message.edit_text(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {count}')
    else:
        await message.edit_text(answer)
    if dialog.mode == 'quiz':
        await send_text_buttons(update, context, "–í—ã–±–æ—Ä —Ç–µ–º—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", {
            'quiz_prog': '–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ python',
            'quiz_math': '–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏',
            'quiz_biology': '–ë–∏–æ–ª–æ–≥–∏—è',
            'quiz_more': '–í–æ–ø—Ä–æ—Å –ø–æ —Ç–æ–π –∂–µ —Ç–µ–º–µ'
        })

async def talk(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏–∑–≤–µ—Å—Ç–Ω—ã–º–∏ –ª–∏—á–Ω–æ—Å—Ç—è–º–∏
    """

    dialog.mode = 'talk'
    message = load_message('talk')
    await send_image(update, context, 'talk')
    await send_text_buttons(update, context,message,{
        'talk_cobain':'–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ö–æ–±–µ–π–Ω–æ–º',
        'talk_hawking':'–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –•–æ–∫–∏–Ω–≥–æ–º',
        'talk_nietzsche':'–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ù–∏—Ü—à–µ',
        'talk_queen':'–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –ï–ª–∏–∑–ø–≤–µ—Ç–æ–π ||',
        'talk_tolkien':'–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –¢–æ–ª–∫–∏–µ–Ω—ã–º'
    })

async def talk_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∏–∞–ª–æ–≥–∞ —Å –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç—å—é
    """

    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'talk_cobain':
        promt = load_prompt('talk_cobain')
        chat_gpt.set_prompt(promt)
        await send_image(update, context, 'talk_cobain')
        await send_text(update, context, '–ö—É—Ä—Ç! –•–æ—Ä–æ—à–∏–π –≤—ã–±–æ—Ä! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:')
    elif cb == 'talk_hawking':
        promt = load_prompt('talk_hawking')
        chat_gpt.set_prompt(promt)
        await send_image(update, context, 'talk_hawking')
        await send_text(update, context, '–•–æ–∫–∏–Ω–≥ –ø—Ä–∏–≤–µ—Ç—Å–≤—É–µ—Ç –≤–∞—Å! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:')
    elif cb == 'talk_nietzsche':
        promt = load_prompt('talk_nietzsche')
        chat_gpt.set_prompt(promt)
        await send_image(update, context, 'talk_nietzsche')
        await send_text(update, context, '–î–æ–±—Ä—ã–π –¥—Ä—É–≥, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–∏–ª–æ—Å–æ—Ñ! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:')
    elif cb == 'talk_queen':
        promt = load_prompt('talk_queen')
        chat_gpt.set_prompt(promt)
        await send_image(update, context, 'talk_queen')
        await send_text(update, context, '–í–∞–º –ø–æ—Å—á–∞—Å—Ç–ª–∏–≤–∏–ª–æ—Å—å –ø–æ–æ–±—â–∞—Ç—å—Å—è —Å –ê–Ω–≥–ª–∏–π—Å–∫–æ–π –ö–æ—Ä–æ–ª–µ–≤–æ–π! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å, –Ω–æ –Ω–µ —É—Å–µ—Ä–¥—Å—Ç–≤—É–π—Ç–µ, —Å—Ç–∞—Ä—É—à–∫–∞ —Å–æ–≤—Å–µ–º –ø–ª–æ—Ö–∞:')
    elif cb == 'talk_tolkien':
        promt = load_prompt('talk_tolkien')
        chat_gpt.set_prompt(promt)
        await send_image(update, context, 'talk_tolkien')
        await send_text(update, context, '–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä —ç–ª—å—Ñ–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞! –ú–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å:')
    else:
        await send_text(update, context, '–í—ã –≤—ã–±—Ä–∞–ª–∏ –ª–∏—á–Ω–æ—Å—Ç—å –Ω–µ –∏–∑ —Å–ø–∏—Å–∫–∞')

async def quiz(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–≤–∏–∑–∞
    """
    dialog.mode = 'quiz'
    message = load_message('quiz')
    await send_image(update, context, 'quiz')
    await send_text_buttons(update, context,message,{
        'quiz_prog':'–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —è–∑—ã–∫–µ python',
        'quiz_math':'–ú–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ–æ—Ä–∏–∏',
        'quiz_biology':'–ë–∏–æ–ª–æ–≥–∏—è'
    })

button = ''
async def quiz_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∞–º–∏ –∫–≤–∏–∑–∞
    """

    global button
    await update.callback_query.answer()
    cb = update.callback_query.data
    promt = load_prompt('quiz')
    chat_gpt.set_prompt(promt)
    if cb == 'quiz_prog':
        button = 'quiz_prog'
        message = await  send_text(update, context, "–î—É–º–∞—é, –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º")
        answer = await chat_gpt.send_question(promt, 'quiz_prog')
        await message.edit_text(answer)
    elif cb == 'quiz_math':
        button = 'quiz_math'
        message = await  send_text(update, context, "–î—É–º–∞—é, –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º")
        answer = await chat_gpt.send_question(promt, 'quiz_math')
        await message.edit_text(answer)
    elif cb == 'quiz_biology':
        button = 'quiz_biology'
        message = await  send_text(update, context, "–î—É–º–∞—é, –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º")
        answer = await chat_gpt.send_question(promt, 'quiz_biology')
        await message.edit_text(answer)
    elif cb == 'quiz_more':
        message = await  send_text(update, context, "–î—É–º–∞—é, –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º")
        answer = await chat_gpt.send_question(promt, button)
        await message.edit_text(answer)

async def recommend(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–¥–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π —Ñ–∏–ª—å–º–∞–º –∏–ª–∏ –∫–Ω–∏–≥–∞–º
    """

    dialog.mode = 'recommend'
    message = load_message('recommend')
    await send_image(update, context, 'recommend')
    await send_text_buttons(update, context, message, {
        'recommend_books': '–ö–Ω–∏–≥–∏',
        'recommend_films': '–§–∏–ª—å–º—ã'
    })

async def recommend_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –§—É–Ω–∫—Ü–∏—è, –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    """

    await update.callback_query.answer()
    cb = update.callback_query.data
    if cb == 'recommend_books':
        promt = '–ü–æ–¥–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ –∫–Ω–∏–≥ –∏—Å—Ö–æ–¥—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        await  send_text(update, context, "–£–∫–∞–∂–∏—Ç–µ –∞–≤—Ç–æ—Ä–∞, –∂–∞–Ω—Ä –∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∫–Ω–∏–≥–∏")
    elif cb == 'recommend_films':
        promt = '–ü–æ–¥–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –∏—Å—Ö–æ–¥—è –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'
        await  send_text(update, context, "–£–∫–∞–∂–∏—Ç–µ —Ä–µ–∂–∏—Å—Å–µ—Ä–∞, –∞–∫—Ç–µ—Ä–æ–≤, –∂–∞–Ω—Ä –∏ –ª—é–±—É—é –¥—Ä—É–≥—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–∏–ª—å–º–∞")
    chat_gpt.set_prompt(promt)

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–∂–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –∑–∞–¥–∞–Ω, —Ç–æ –æ—Ç—Å—ã–ª–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ –æ—Ç–≤–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """

    if dialog.mode == 'gpt':
        await gpt_dialog(update, context)
    elif dialog.mode == 'talk':
        await gpt_dialog(update, context)
    elif dialog.mode == 'quiz':
        await gpt_dialog(update, context)
    elif dialog.mode == 'recommend':
        await gpt_dialog(update, context)
    else:
        await send_text(update, context, update.message.text)

async def random(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
        –§—É–Ω–∫—Ü–∏—è –≤—ã–¥–∞–µ—Ç —Ä–∞–Ω–¥–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–π —Ñ–∞–∫—Ç
    """

    promt = load_prompt('random')
    message = load_message('random')
    await send_image(update, context, 'random')
    message = await send_text(update, context, message)
    answer = await chat_gpt.send_question(promt, '')
    await message.edit_text(answer)


dialog = Dialog()
dialog.mode = None
# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –∫–∞–∫ –∞—Ç—Ä–∏–±—É—Ç—ã dialog

chat_gpt = ChatGptService(ChatGPT_TOKEN)
app = ApplicationBuilder().token(TELEBOT_TOKEN).build()
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler)) #~filters.COMMAND –∏—Å–∫–ª—é—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏
app.add_handler(CommandHandler('start', start))
app.add_handler(CommandHandler('random', random))
app.add_handler(CommandHandler('gpt', gpt))
app.add_handler(CommandHandler('talk', talk))
app.add_handler(CommandHandler('quiz', quiz))
app.add_handler(CommandHandler('recommend', recommend))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–Ω–æ —Ç–∞–∫:
# app.add_handler(CommandHandler('command', handler_func))

# –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –º–æ–∂–Ω–æ —Ç–∞–∫:
app.add_handler(CallbackQueryHandler(talk_button, pattern='^talk.*'))
app.add_handler(CallbackQueryHandler(quiz_button, pattern='^quiz.*'))
app.add_handler(CallbackQueryHandler(recommend_button, pattern='^recommend.*'))
app.add_handler(CallbackQueryHandler(default_callback_handler))
app.run_polling()
